"use strict";(self.webpackChunkdevops_sandbox=self.webpackChunkdevops_sandbox||[]).push([[8416],{5504:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>E,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"db/clickhouse/altinity/articles/altinity-automatic-backup","title":"Automatic Clickhouse cluster backups and Restore guide","description":"https://github.com/Altinity/clickhouse-backup/blob/master/Examples.md","source":"@site/docs/db/clickhouse/altinity/articles/altinity-automatic-backup.md","sourceDirName":"db/clickhouse/altinity/articles","slug":"/db/clickhouse/altinity/articles/altinity-automatic-backup","permalink":"/docs/db/clickhouse/altinity/articles/altinity-automatic-backup","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"article","permalink":"/docs/tags/article"},{"inline":true,"label":"altinity","permalink":"/docs/tags/altinity"},{"inline":true,"label":"clickhouse","permalink":"/docs/tags/clickhouse"},{"inline":true,"label":"database","permalink":"/docs/tags/database"}],"version":"current","frontMatter":{"tags":["article","altinity","clickhouse","database"]},"sidebar":"tutorialSidebar","previous":{"title":"Altinity Clickhouse Operator","permalink":"/docs/db/clickhouse/altinity/"},"next":{"title":"Altinity ClickHouse low resource setup","permalink":"/docs/db/clickhouse/altinity/articles/altinity-setup-low-resource"}}');var s=a(4848),c=a(8453);const E={tags:["article","altinity","clickhouse","database"]},o="Automatic Clickhouse cluster backups and Restore guide",i={},r=[{value:"Setup",id:"setup",level:2},{value:"Automatic backups CronJob",id:"automatic-backups-cronjob",level:2},{value:"List available backups",id:"list-available-backups",level:2},{value:"Restore everything",id:"restore-everything",level:2}];function R(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"automatic-clickhouse-cluster-backups-and-restore-guide",children:"Automatic Clickhouse cluster backups and Restore guide"})}),"\n",(0,s.jsx)(n.admonition,{title:"Official Example",type:"note",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/Altinity/clickhouse-backup/blob/master/Examples.md",children:"https://github.com/Altinity/clickhouse-backup/blob/master/Examples.md"})})}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["secret with ",(0,s.jsx)(n.code,{children:"s3"})," credentials"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "S3_ASSUME_ROLE_ARN": "arn:aws:iam::XXXXXXXXXXXX:role/clickhouse-backup",\n  "S3_BUCKET": "clickhouse-backup",\n  "S3_REGION": "us-west-2"\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["fetch credentials with ",(0,s.jsx)(n.code,{children:"ExternalSectet"})," (example)"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: "clickhouse-backup"\nspec:\n  refreshInterval: "180m"\n  secretStoreRef:\n    name: "aws-store"\n    kind: SecretStore\n  target:\n    name: "clickhouse-backup"\n    creationPolicy: Owner\n    template:\n      engineVersion: "v2"\n      metadata:\n        annotations:\n          reloader.stakater.com/match: "true"\n  dataFrom:\n  - extract:\n      key: "/clickhouse_backup"\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["create ",(0,s.jsx)(n.code,{children:"ConfigMap"})," with ",(0,s.jsx)(n.code,{children:"clickhouse-backup"})," config"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"required values with shards and replicas count"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: "clickhouse-backup"\ndata:\n  CLICKHOUSE_SERVICES: "{{- $shards := (.Values.clickhouse.shards | int) -}}{{- range $i := until $shards -}}{{- if $i -}},{{- end -}}chi-clickhouse-clickhouse-{{ $i }}-0{{- end }}"\n  CLICKHOUSE_SCHEMA_RESTORE_SERVICES: "{{- $shards := (.Values.clickhouse.shards | int) -}}{{- range $i := until $shards -}}{{- if $i -}},{{- end -}}chi-clickhouse-clickhouse-{{ $i }}-0{{- end }}"\n  CLICKHOUSE_DATA_RESTORE_SERVICES: "{{- $shards := (.Values.clickhouse.shards | int) -}}{{- $replicas := (.Values.clickhouse.replicas | int) -}}{{- range $i := until $shards -}}{{- range $j := until $replicas -}}{{- if or $i $j -}},{{- end -}}chi-clickhouse-clickhouse-{{ $i }}-{{ $j }}{{- end -}}{{- end }}"\n  CLICKHOUSE_PORT: "9000"\n  BACKUP_USER: "default"\n  BACKUP_PASSWORD: ""\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"configure sidecar"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: "clickhouse.altinity.com/v1"\nkind: "ClickHouseInstallation"\nspec:\n  templates:\n    podTemplates:\n      - name: clickhouse\n        spec:\n          containers:\n            - name: backup-server\n              image: altinity/clickhouse-backup:master\n              imagePullPolicy: Always\n              command:\n                - bash\n                - -xc\n                - "/bin/clickhouse-backup server"\n              env:\n                # - name: LOG_LEVEL\n                #   value: "debug"\n                - name: ALLOW_EMPTY_BACKUPS\n                  value: "true"\n                - name: API_LISTEN\n                  value: "0.0.0.0:7171"\n                - name: API_CREATE_INTEGRATION_TABLES\n                  value: "true"\n                - name: BACKUPS_TO_KEEP_REMOTE\n                  value: "3"\n                - name: REMOTE_STORAGE\n                  value: "s3"\n                - name: S3_ACL\n                  value: "private"\n                - name: S3_PATH\n                  value: backup/shard-{shard}\n                - name: S3_FORCE_PATH_STYLE\n                  value: "true"\n                # - name: S3_DEBUG\n                #   value: "true"\n              envFrom:\n                - secretRef:\n                   name: clickhouse-backup\n              ports:\n                - name: backup-rest\n                  containerPort: 7171\n'})}),"\n",(0,s.jsx)(n.h2,{id:"automatic-backups-cronjob",children:"Automatic backups CronJob"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: clickhouse-backup-cron\nspec:\n  suspend: true\n  schedule: "0 0 * * *"\n  concurrencyPolicy: "Forbid"\n  jobTemplate:\n    spec:\n      backoffLimit: 1\n      completions: 1\n      parallelism: 1\n      template:\n        metadata:\n          labels:\n            app: clickhouse-backup-cron\n        spec:\n          restartPolicy: Never\n          containers:\n            - name: run-backup-cron\n              image: "altinity/clickhouse-server:latest"\n              imagePullPolicy: IfNotPresent\n              envFrom:\n                - configMapRef:\n                    name: "clickhouse-backup"\n                - secretRef:\n                    name: "clickhouse-backup"\n              env:\n                - name: MAKE_INCREMENT_BACKUP\n                  value: "1"\n                - name: FULL_BACKUP_WEEKDAY\n                  value: "1"\n              command:\n                - bash\n                - -ec\n                - CLICKHOUSE_SERVICES=$(echo $CLICKHOUSE_SERVICES | tr "," " ");\n                  BACKUP_DATE=$(date +%Y-%m-%d-%H-%M-%S);\n                  declare -A BACKUP_NAMES;\n                  declare -A DIFF_FROM;\n                  if [[ "" != "$BACKUP_PASSWORD" ]]; then\n                    BACKUP_PASSWORD="--password=$BACKUP_PASSWORD";\n                  fi;\n                  for SERVER in $CLICKHOUSE_SERVICES; do\n                    if [[ "1" == "$MAKE_INCREMENT_BACKUP" ]]; then\n                      LAST_FULL_BACKUP=$(clickhouse-client -q "SELECT name FROM system.backup_list WHERE location=\'remote\' AND name LIKE \'%${SERVER}%\' AND name LIKE \'%full%\' AND desc NOT LIKE \'broken%\' ORDER BY created DESC LIMIT 1 FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD);\n                      TODAY_FULL_BACKUP=$(clickhouse-client -q "SELECT name FROM system.backup_list WHERE location=\'remote\' AND name LIKE \'%${SERVER}%\' AND name LIKE \'%full%\' AND desc NOT LIKE \'broken%\' AND toDate(created) = today() ORDER BY created DESC LIMIT 1 FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD)\n                      PREV_BACKUP_NAME=$(clickhouse-client -q "SELECT name FROM system.backup_list WHERE location=\'remote\' AND desc NOT LIKE \'broken%\' ORDER BY created DESC LIMIT 1 FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD);\n                      DIFF_FROM[$SERVER]="";\n                      if [[ ("$FULL_BACKUP_WEEKDAY" == "$(date +%u)" && "" == "$TODAY_FULL_BACKUP") || "" == "$PREV_BACKUP_NAME" || "" == "$LAST_FULL_BACKUP" ]]; then\n                        BACKUP_NAMES[$SERVER]="full-$BACKUP_DATE";\n                      else\n                        BACKUP_NAMES[$SERVER]="increment-$BACKUP_DATE";\n                        DIFF_FROM[$SERVER]="--diff-from-remote=$PREV_BACKUP_NAME";\n                      fi\n                    else\n                      BACKUP_NAMES[$SERVER]="full-$BACKUP_DATE";\n                    fi;\n                    echo "set backup name on $SERVER = ${BACKUP_NAMES[$SERVER]}";\n                  done;\n                  for SERVER in $CLICKHOUSE_SERVICES; do\n                    echo "create ${BACKUP_NAMES[$SERVER]} on $SERVER";\n                    clickhouse-client --echo -mn -q "INSERT INTO system.backup_actions(command) VALUES(\'create ${SERVER}-${BACKUP_NAMES[$SERVER]}\')" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n                  done;\n                  for SERVER in $CLICKHOUSE_SERVICES; do\n                    while [[ "in progress" == $(clickhouse-client -mn -q "SELECT status FROM system.backup_actions WHERE command=\'create ${SERVER}-${BACKUP_NAMES[$SERVER]}\' FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD) ]]; do\n                      echo "still in progress ${BACKUP_NAMES[$SERVER]} on $SERVER";\n                      sleep 1;\n                    done;\n                    if [[ "success" != $(clickhouse-client -mn -q "SELECT status FROM system.backup_actions WHERE command=\'create ${SERVER}-${BACKUP_NAMES[$SERVER]}\' FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD) ]]; then\n                      echo "error create ${BACKUP_NAMES[$SERVER]} on $SERVER";\n                      clickhouse-client -mn --echo -q "SELECT status,error FROM system.backup_actions WHERE command=\'create ${SERVER}-${BACKUP_NAMES[$SERVER]}\'" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n                      exit 1;\n                    fi;\n                  done;\n                  for SERVER in $CLICKHOUSE_SERVICES; do\n                    echo "upload ${DIFF_FROM[$SERVER]} ${BACKUP_NAMES[$SERVER]} on $SERVER";\n                    clickhouse-client --echo -mn -q "INSERT INTO system.backup_actions(command) VALUES(\'upload ${DIFF_FROM[$SERVER]} ${SERVER}-${BACKUP_NAMES[$SERVER]}\')" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n                  done;\n                  for SERVER in $CLICKHOUSE_SERVICES; do\n                    while [[ "in progress" == $(clickhouse-client -mn -q "SELECT status FROM system.backup_actions WHERE command=\'upload ${DIFF_FROM[$SERVER]} ${SERVER}-${BACKUP_NAMES[$SERVER]}\'" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD) ]]; do\n                      echo "upload still in progress ${BACKUP_NAMES[$SERVER]} on $SERVER";\n                      sleep 5;\n                    done;\n                    if [[ "success" != $(clickhouse-client -mn -q "SELECT status FROM system.backup_actions WHERE command=\'upload ${DIFF_FROM[$SERVER]} ${SERVER}-${BACKUP_NAMES[$SERVER]}\'" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD) ]]; then\n                      echo "error ${BACKUP_NAMES[$SERVER]} on $SERVER";\n                      clickhouse-client -mn --echo -q "SELECT status,error FROM system.backup_actions WHERE command=\'upload ${DIFF_FROM[$SERVER]} ${SERVER}-${BACKUP_NAMES[$SERVER]}\'" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n                      exit 1;\n                    fi;\n                    clickhouse-client --echo -mn -q "INSERT INTO system.backup_actions(command) VALUES(\'delete local ${SERVER}-${BACKUP_NAMES[$SERVER]}\')" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n                  done;\n                  echo "BACKUP CREATED"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"list-available-backups",children:"List available backups"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl get pods -n clickhouse -l clickhouse.altinity.com/replica="0" -o jsonpath="{.items[*].metadata.name}" | xargs -n1 -I% kubectl exec -n clickhouse -it % --container backup-server -- env LOG_LEVEL=error clickhouse-backup list\n'})}),"\n",(0,s.jsx)(n.h2,{id:"restore-everything",children:"Restore everything"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["fill required ",(0,s.jsx)(n.code,{children:"env"})," params:"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TABLE"})," -- format ",(0,s.jsx)(n.code,{children:"<DB>.<TABLE>"})," regex supported\n",(0,s.jsx)(n.code,{children:"BACKUP_DATE"})," -- format ",(0,s.jsx)(n.code,{children:"2024-03-27"}),", left empty to use last available"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"env:\n  - name: TABLE\n    value: 'db.table*'\n  - name: BACKUP_DATE\n    value: \"2024-03-27\"\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"apply restore job"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'cat <<\'EOF\' | kubectl apply -f -\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: clickhouse-restore\n  namespace: clickhouse\nspec:\n  backoffLimit: 0\n  template:\n    metadata:\n      name: clickhouse-backup-restore\n      labels:\n        app: clickhouse-backup-restore\n    spec:\n      restartPolicy: Never\n      containers:\n      - name: clickhouse-backup-restore\n        image: clickhouse/clickhouse-client:latest\n        imagePullPolicy: IfNotPresent\n        envFrom:\n          - configMapRef:\n              name: "clickhouse-backup"\n          - secretRef:\n              name: "clickhouse-backup"\n        env:\n          - name: TABLE\n            value: \'test.*_table2\'\n          - name: BACKUP_DATE\n            value: 2024-03-27\n        command:\n        - bash\n        - -ec\n        - if [[ "" != "$BACKUP_PASSWORD" ]]; then\n            BACKUP_PASSWORD="--password=$BACKUP_PASSWORD";\n          fi;\n          declare -A BACKUP_NAMES;\n          CLICKHOUSE_SCHEMA_RESTORE_SERVICES=$(echo $CLICKHOUSE_SCHEMA_RESTORE_SERVICES | tr "," " ");\n          CLICKHOUSE_DATA_RESTORE_SERVICES=$(echo $CLICKHOUSE_DATA_RESTORE_SERVICES | tr "," " ");\n          for SERVER in $CLICKHOUSE_SCHEMA_RESTORE_SERVICES; do\n            LATEST_BACKUP_NAME=$(clickhouse-client -q "SELECT name FROM system.backup_list WHERE location=\'remote\' AND desc NOT LIKE \'broken%\' AND name LIKE \'%${SERVER}%${BACKUP_DATE}%\' ORDER BY created DESC LIMIT 1 FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD);\n            if [[ "" == "$LATEST_BACKUP_NAME" ]]; then\n              echo "Remote backup not found for $SERVER";\n              exit 1;\n            fi;\n            BACKUP_NAMES[$SERVER]="$LATEST_BACKUP_NAME";\n            clickhouse-client -mn --echo -q "INSERT INTO system.backup_actions(command) VALUES(\'restore_remote --schema --rm -t ${TABLE} ${BACKUP_NAMES[$SERVER]}\')" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n          done;\n          for SERVER in $CLICKHOUSE_SCHEMA_RESTORE_SERVICES; do\n            while [[ "in progress" == $(clickhouse-client -mn -q "SELECT status FROM system.backup_actions WHERE command=\'restore_remote --schema --rm -t ${TABLE} ${BACKUP_NAMES[$SERVER]}\' ORDER BY start DESC LIMIT 1 FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD) ]]; do\n              echo "still in progress ${BACKUP_NAMES[$SERVER]} on $SERVER";\n              sleep 1;\n            done;\n            RESTORE_STATUS=$(clickhouse-client -mn -q "SELECT status FROM system.backup_actions WHERE command=\'restore_remote --schema --rm -t ${TABLE} ${BACKUP_NAMES[$SERVER]}\'  ORDER BY start DESC LIMIT 1 FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD);\n            if [[ "success" != "${RESTORE_STATUS}" ]]; then\n              echo "error restore_remote --schema --rm -t ${TABLE} ${BACKUP_NAMES[$SERVER]} on $SERVER";\n              clickhouse-client -mn --echo -q "SELECT start,finish,status,error FROM system.backup_actions WHERE command=\'restore_remote --schema --rm -t ${TABLE} ${BACKUP_NAMES[$SERVER]}\'" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n              exit 1;\n            fi;\n            if [[ "success" == "${RESTORE_STATUS}" ]]; then\n              echo "schema ${BACKUP_NAMES[$SERVER]} on $SERVER RESTORED";\n              clickhouse-client -q "INSERT INTO system.backup_actions(command) VALUES(\'delete local ${BACKUP_NAMES[$SERVER]}\')" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n            fi;\n          done;\n          for SERVER in $CLICKHOUSE_DATA_RESTORE_SERVICES; do\n            clickhouse-client -mn --echo -q "INSERT INTO system.backup_actions(command) VALUES(\'restore_remote --data -t ${TABLE} ${BACKUP_NAMES[$SERVER]}\')" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n          done;\n          for SERVER in $CLICKHOUSE_DATA_RESTORE_SERVICES; do\n            while [[ "in progress" == $(clickhouse-client -mn -q "SELECT status FROM system.backup_actions WHERE command=\'restore_remote --data -t ${TABLE} ${BACKUP_NAMES[$SERVER]}\' ORDER BY start DESC LIMIT 1 FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD) ]]; do\n              echo "still in progress ${BACKUP_NAMES[$SERVER]} on $SERVER";\n              sleep 1;\n            done;\n            RESTORE_STATUS=$(clickhouse-client -mn -q "SELECT status FROM system.backup_actions WHERE command=\'restore_remote --data -t ${TABLE} ${BACKUP_NAMES[$SERVER]}\'  ORDER BY start DESC LIMIT 1 FORMAT TabSeparatedRaw" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD);\n            if [[ "success" != "${RESTORE_STATUS}" ]]; then\n              echo "error restore_remote --data -t ${TABLE} ${BACKUP_NAMES[$SERVER]} on $SERVER";\n              clickhouse-client -mn --echo -q "SELECT start,finish,status,error FROM system.backup_actions WHERE command=\'restore_remote --data -t ${TABLE} ${BACKUP_NAMES[$SERVER]}\'" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n              exit 1;\n            fi;\n            echo "data ${BACKUP_NAMES[$SERVER]} on $SERVER RESTORED";\n            if [[ "success" == "${RESTORE_STATUS}" ]]; then\n              clickhouse-client -q "INSERT INTO system.backup_actions(command) VALUES(\'delete local ${BACKUP_NAMES[$SERVER]}\')" --host="$SERVER" --port="$CLICKHOUSE_PORT" --user="$BACKUP_USER" $BACKUP_PASSWORD;\n            fi;\n          done\nEOF\n'})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(R,{...e})}):R(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>E,x:()=>o});var t=a(6540);const s={},c=t.createContext(s);function E(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:E(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);