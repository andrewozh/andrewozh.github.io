"use strict";(self.webpackChunkdevops_sandbox=self.webpackChunkdevops_sandbox||[]).push([[6261],{8453:(e,r,a)=>{a.d(r,{R:()=>l,x:()=>o});var n=a(6540);const i={},t=n.createContext(i);function l(e){const r=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(t.Provider,{value:r},e.children)}},9720:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"infra/platform/applibrary","title":"Helm Applibrary","description":"Such fancy alternatives just can\'t dynamically read and merge yaml configuration! This feature is required for multi-dimensional yaml configuration hierarchy. So helm is still on top imho. I\'ll check them out again later..","source":"@site/docs/infra/platform/applibrary.md","sourceDirName":"infra/platform","slug":"/infra/platform/applibrary","permalink":"/docs/infra/platform/applibrary","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"tool","permalink":"/docs/tags/tool"},{"inline":true,"label":"helm","permalink":"/docs/tags/helm"},{"inline":true,"label":"applibrary","permalink":"/docs/tags/applibrary"},{"inline":true,"label":"platform","permalink":"/docs/tags/platform"},{"inline":true,"label":"infrastructure","permalink":"/docs/tags/infrastructure"}],"version":"current","frontMatter":{"tags":["tool","helm","applibrary","platform","infrastructure"]},"sidebar":"tutorialSidebar","previous":{"title":"GitOps Platform","permalink":"/docs/infra/platform/"},"next":{"title":"ArgoCD","permalink":"/docs/infra/platform/argocd"}}');var i=a(4848),t=a(8453);const l={tags:["tool","helm","applibrary","platform","infrastructure"]},o="Helm Applibrary",s={},c=[{value:"Use Applibrary",id:"use-applibrary",level:2},{value:"Configuration values",id:"configuration-values",level:3},{value:"Articles",id:"articles",level:2}];function p(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"helm-applibrary",children:"Helm Applibrary"})}),"\n",(0,i.jsx)(r.admonition,{title:"Jsonnet / KCL / CUE",type:"note",children:(0,i.jsx)(r.p,{children:"Such fancy alternatives just can't dynamically read and merge yaml configuration! This feature is required for multi-dimensional yaml configuration hierarchy. So helm is still on top imho. I'll check them out again later.."})}),"\n",(0,i.jsx)(r.h2,{id:"use-applibrary",children:"Use Applibrary"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["The ",(0,i.jsx)(r.code,{children:"_chart/"})," directory contains a reusable Helm library with common Kubernetes templates"]}),"\n",(0,i.jsx)(r.li,{children:"Each application uses the library as a dependency"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-yaml",children:'```yaml title="Chart.yaml"\napiVersion: v2\nname: vault\nversion: 0.1.0\ndependencies:\n  - name: chart\n    version: 0.1.0\n    repository: file://../../_chart\n'})}),"\n",(0,i.jsx)(r.h3,{id:"configuration-values",children:"Configuration values"}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udcd6 ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"articles/config",children:"Configuration Files \u2192"})})]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"articles",children:"Articles"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/infra/platform/articles/how-to-create-new-aplication",children:"How to create new application"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/infra/platform/articles/how-to-upgrade-helm-chart",children:"How to upgrade helm chart"})}),"\n"]})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);