"use strict";(self.webpackChunkdevops_sandbox=self.webpackChunkdevops_sandbox||[]).push([[3355],{6707:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"infra/platform/platform","title":"GitOps Platform","description":"This repository implements a sophisticated GitOps architecture using ArgoCD with multi-dimensional configuration management across clouds, accounts, and environments.","source":"@site/docs/infra/platform/platform.md","sourceDirName":"infra/platform","slug":"/infra/platform/","permalink":"/docs/infra/platform/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Local Talos multi-cluster setup","permalink":"/docs/infra/k8s/cluster-local-talos"},"next":{"title":"App-library Helm chart","permalink":"/docs/infra/platform/applibrary-helm-chart"}}');var l=i(4848),r=i(8453);const o={},t="GitOps Platform",c={},s=[{value:"Tools",id:"tools",level:2},{value:"\ud83c\udfd7\ufe0f Architecture Overview",id:"\ufe0f-architecture-overview",level:2},{value:"\ud83d\udcc1 Repository Structure",id:"-repository-structure",level:2},{value:"\ud83d\udd04 Configuration Flow",id:"-configuration-flow",level:2},{value:"1. Main ArgoCD Application \u2192 ApplicationSets",id:"1-main-argocd-application--applicationsets",level:3},{value:"2. ApplicationSets \u2192 Individual Applications",id:"2-applicationsets--individual-applications",level:3},{value:"3. Application Configuration Pattern",id:"3-application-configuration-pattern",level:3},{value:"\ud83c\udfaf Helm Chart + Application Library Pattern",id:"-helm-chart--application-library-pattern",level:2},{value:"Application Library (<code>_chart/</code>)",id:"application-library-_chart",level:3},{value:"Application Chart Pattern",id:"application-chart-pattern",level:3},{value:"\ud83d\udcca Configuration Hierarchy &amp; Values Override",id:"-configuration-hierarchy--values-override",level:2},{value:"Configuration Files Priority (High to Low)",id:"configuration-files-priority-high-to-low",level:3},{value:"Example Configuration Merge",id:"example-configuration-merge",level:3},{value:"\ud83d\ude80 Key Features",id:"-key-features",level:2},{value:"1. <strong>Multi-Dimensional Targeting</strong>",id:"1-multi-dimensional-targeting",level:3},{value:"2. <strong>Automatic Discovery</strong>",id:"2-automatic-discovery",level:3},{value:"3. <strong>Configuration Inheritance</strong>",id:"3-configuration-inheritance",level:3},{value:"4. <strong>Application Library Reuse</strong>",id:"4-application-library-reuse",level:3},{value:"5. <strong>Flexible Deployment Control</strong>",id:"5-flexible-deployment-control",level:3},{value:"\ud83d\udd27 Adding a New Application",id:"-adding-a-new-application",level:2},{value:"\ud83d\udccb Configuration Reference",id:"-configuration-reference",level:2},{value:"Global Configuration Schema",id:"global-configuration-schema",level:3},{value:"Application Configuration Schema",id:"application-configuration-schema",level:3},{value:"ArgoCD",id:"argocd",level:2},{value:"App-library",id:"app-library",level:2},{value:"Other manifest generation tools: KCL / Jsonnet",id:"other-manifest-generation-tools-kcl--jsonnet",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"gitops-platform",children:"GitOps Platform"})}),"\n",(0,l.jsx)(e.p,{children:"This repository implements a sophisticated GitOps architecture using ArgoCD with multi-dimensional configuration management across clouds, accounts, and environments."}),"\n",(0,l.jsx)(e.h2,{id:"tools",children:"Tools"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:"Helm"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:"ArgoCD"})}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"\ufe0f-architecture-overview",children:"\ud83c\udfd7\ufe0f Architecture Overview"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"Main ArgoCD Application\n    \u2193\nApplicationSets (per cloud/account/environment combination)  \n    \u2193\nIndividual Argo Applications\n    \u2193\nHelm Charts + Application Library + Configuration Hierarchy\n"})}),"\n",(0,l.jsx)(e.h2,{id:"-repository-structure",children:"\ud83d\udcc1 Repository Structure"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"devops-sandbox/\n\u251c\u2500\u2500 _argocd-infra/           # ArgoCD infrastructure and ApplicationSets\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u2514\u2500\u2500 appsets.yaml     # Dynamic ApplicationSet generator\n\u2502   \u2514\u2500\u2500 values.yaml          # ArgoCD configuration\n\u251c\u2500\u2500 _chart/                  # Reusable application library (applib)\n\u2502   \u251c\u2500\u2500 templates/           # Common Kubernetes templates\n\u2502   \u2514\u2500\u2500 values.yaml          # Default Library chart configuration values\n\u251c\u2500\u2500 applications/            # Individual application configurations\n\u2502   \u2514\u2500\u2500 */\n\u2502       \u251c\u2500\u2500 Chart.yaml       # App-specific chart with dependencies\n\u2502       \u251c\u2500\u2500 argo.yaml        # ArgoCD application configuration\n\u2502       \u251c\u2500\u2500 values.yaml      # Application-specific values\n\u2502       \u2514\u2500\u2500 *.values.yaml    # Environment-specific overrides\n\u251c\u2500\u2500 global.yaml              # Global configuration baseline\n\u251c\u2500\u2500 demo.yaml                # Cloud-specific overrides\n\u2514\u2500\u2500 *.yaml                   # Additional configuration files\n"})}),"\n",(0,l.jsx)(e.h2,{id:"-configuration-flow",children:"\ud83d\udd04 Configuration Flow"}),"\n",(0,l.jsx)(e.h3,{id:"1-main-argocd-application--applicationsets",children:"1. Main ArgoCD Application \u2192 ApplicationSets"}),"\n",(0,l.jsx)(e.p,{children:"The main ArgoCD application deploys ApplicationSets that dynamically discover and manage all applications in the repository."}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Key File:"})," ",(0,l.jsx)(e.code,{children:"_argocd-infra/templates/appsets.yaml"})]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:'# Creates ApplicationSets for each cloud/account/environment combination\n{{- range $cloud := .Values.clouds }}\n{{- range $account := $cloud.accounts }}\n{{- range $environment := $account.environments }}\n---\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: "{{ $cloud.name }}-{{ $account.name }}-{{ $environment.name }}"\n'})}),"\n",(0,l.jsx)(e.h3,{id:"2-applicationsets--individual-applications",children:"2. ApplicationSets \u2192 Individual Applications"}),"\n",(0,l.jsx)(e.p,{children:"Each ApplicationSet uses a matrix generator to:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Discover applications"})," via Git file generator (",(0,l.jsx)(e.code,{children:"applications/*/argo.yaml"}),")"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Select target clusters"})," based on destination matching"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Generate ArgoCD Applications"})," for each app/cluster combination"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Discovery Pattern:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"generators:\n- matrix:\n    generators:\n    - git:\n        repoURL: {{ $.Values.repo }}\n        files:\n          - path: 'applications/*/argo.yaml'  # Auto-discover apps\n    - clusters: {}                           # Match with clusters\n"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Cluster Selection Logic:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:'selector:\n  matchExpressions:\n  - key: destination\n    operator: In\n    values:\n    - "all"                                    # Deploy everywhere\n    - "{{ $cloud.name }}"                     # Cloud-specific\n    - "{{ $account.name }}"                   # Account-specific  \n    - "{{ $environment.name }}"               # Environment-specific\n    - "{{ $cloud.name }}-{{ $account.name }}" # Combined targeting\n'})}),"\n",(0,l.jsx)(e.h3,{id:"3-application-configuration-pattern",children:"3. Application Configuration Pattern"}),"\n",(0,l.jsx)(e.p,{children:"Each application follows a standardized structure:"}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Application Directory:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"applications/kube-prometheus-stack/\n\u251c\u2500\u2500 Chart.yaml      # Helm chart with dependencies\n\u251c\u2500\u2500 argo.yaml       # ArgoCD-specific configuration  \n\u251c\u2500\u2500 values.yaml     # Base application values\n\u2514\u2500\u2500 *.values.yaml   # Environment-specific overrides\n"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"argo.yaml Configuration:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"destination: all              # Where to deploy (cluster selector)\nnamespace: monitoring         # Target namespace\nautosync: true               # Enable automatic synchronization\nsyncOptions:                 # ArgoCD sync behavior\n  - ServerSideApply=true\n  - CreateNamespace=true\n"})}),"\n",(0,l.jsx)(e.h2,{id:"-helm-chart--application-library-pattern",children:"\ud83c\udfaf Helm Chart + Application Library Pattern"}),"\n",(0,l.jsxs)(e.h3,{id:"application-library-_chart",children:["Application Library (",(0,l.jsx)(e.code,{children:"_chart/"}),")"]}),"\n",(0,l.jsxs)(e.p,{children:["The ",(0,l.jsx)(e.code,{children:"_chart/"})," directory contains a reusable Helm library with common Kubernetes templates:"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"# Chart.yaml\napiVersion: v2\nname: chart\ntype: application           # Reusable application library\nversion: 0.1.0\n"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Templates Available:"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"deployment.yaml"})," - Kubernetes Deployment"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"service.yaml"})," - Kubernetes Service"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"ingress.yaml"})," - Ingress configuration"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"serviceaccount.yaml"})," - Service Account"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"hpa.yaml"})," - Horizontal Pod Autoscaler"]}),"\n"]}),"\n",(0,l.jsx)(e.h3,{id:"application-chart-pattern",children:"Application Chart Pattern"}),"\n",(0,l.jsx)(e.p,{children:"Each application uses the library as a dependency:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:'# applications/*/Chart.yaml\napiVersion: v2\nname: prom-stack\nversion: 0.1.0\ndependencies:\n  - name: kube-prometheus-stack      # External chart\n    version: "65.1.1"\n    repository: https://prometheus-community.github.io/helm-charts\n  - name: chart                      # Internal app library\n    version: 0.1.0\n    repository: file://../../_chart  # Local dependency\n'})}),"\n",(0,l.jsx)(e.h2,{id:"-configuration-hierarchy--values-override",children:"\ud83d\udcca Configuration Hierarchy & Values Override"}),"\n",(0,l.jsx)(e.p,{children:"The system implements a sophisticated configuration hierarchy with multiple override levels:"}),"\n",(0,l.jsx)(e.h3,{id:"configuration-files-priority-high-to-low",children:"Configuration Files Priority (High to Low)"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"# ApplicationSet automatically includes these value files:\nvalueFiles:\n  # 1. Global baseline\n  - /global.yaml\n  \n  # 2. Cloud-specific  \n  - '/{{ $cloud.name }}.yaml'           # e.g., /demo.yaml\n  \n  # 3. Account-specific\n  - '/{{ $account.name }}.yaml'         # e.g., /main.yaml\n  \n  # 4. Environment-specific  \n  - '/{{ $environment.name }}.yaml'     # e.g., /common.yaml\n  \n  # 5. Combined configurations\n  - '/{{ $cloud.name }}-{{ $account.name }}.yaml'\n  - '/{{ $cloud.name }}-{{ $environment.name }}.yaml' \n  - '/{{ $account.name }}-{{ $environment.name }}.yaml'\n  - '/{{ $cloud.name }}-{{ $account.name }}-{{ $environment.name }}.yaml'\n  \n  # 6. Application-specific (in app directory)\n  - values.yaml                        # Base app values\n  - {{ $cloud.name }}.values.yaml     # App cloud overrides\n  - {{ $account.name }}.values.yaml   # App account overrides\n  - {{ $environment.name }}.values.yaml # App env overrides\n  # ... (same pattern for combined app-specific values)\n"})}),"\n",(0,l.jsx)(e.h3,{id:"example-configuration-merge",children:"Example Configuration Merge"}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"global.yaml"})," (baseline):"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"namespace: default\nrepo: https://github.com/andrewozh/devops-sandbox.git\nglobal:\n  cloud: local\n  account: main\n  env: common\n"})}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"demo.yaml"})," (cloud override):"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"repo: git://git-server.default.svc.cluster.local/\nglobal:\n  cloud: local\n  account: killercoda\n  env: demo\n"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Final merged configuration:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"namespace: default\nrepo: git://git-server.default.svc.cluster.local/  # Overridden by demo.yaml\nglobal:\n  cloud: local\n  account: killercoda  # Overridden by demo.yaml  \n  env: demo           # Overridden by demo.yaml\n"})}),"\n",(0,l.jsx)(e.h2,{id:"-key-features",children:"\ud83d\ude80 Key Features"}),"\n",(0,l.jsxs)(e.h3,{id:"1-multi-dimensional-targeting",children:["1. ",(0,l.jsx)(e.strong,{children:"Multi-Dimensional Targeting"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Cloud-level"}),": Different cloud providers or regions"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Account-level"}),": Different organizational units or customers"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Environment-level"}),": dev, staging, production, etc."]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Combined targeting"}),": Fine-grained deployment control"]}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"2-automatic-discovery",children:["2. ",(0,l.jsx)(e.strong,{children:"Automatic Discovery"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Applications are automatically discovered via ",(0,l.jsx)(e.code,{children:"applications/*/argo.yaml"})]}),"\n",(0,l.jsx)(e.li,{children:"No manual ApplicationSet updates required for new applications"}),"\n",(0,l.jsx)(e.li,{children:"Git-based source of truth"}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"3-configuration-inheritance",children:["3. ",(0,l.jsx)(e.strong,{children:"Configuration Inheritance"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Global baseline with environment-specific overrides"}),"\n",(0,l.jsx)(e.li,{children:"Helm's native value file precedence handling"}),"\n",(0,l.jsx)(e.li,{children:"Support for both global and application-specific configuration layers"}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"4-application-library-reuse",children:["4. ",(0,l.jsx)(e.strong,{children:"Application Library Reuse"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Common Kubernetes patterns in ",(0,l.jsx)(e.code,{children:"_chart/"})]}),"\n",(0,l.jsx)(e.li,{children:"Consistent deployment patterns across all applications"}),"\n",(0,l.jsx)(e.li,{children:"Easy template updates affect all applications"}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"5-flexible-deployment-control",children:["5. ",(0,l.jsx)(e.strong,{children:"Flexible Deployment Control"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Applications choose their deployment scope via ",(0,l.jsx)(e.code,{children:"argo.yaml"})]}),"\n",(0,l.jsx)(e.li,{children:"Cluster-specific, environment-specific, or global deployments"}),"\n",(0,l.jsx)(e.li,{children:"Fine-grained sync policy control per application"}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"-adding-a-new-application",children:"\ud83d\udd27 Adding a New Application"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Create application directory:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"mkdir applications/my-new-app\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Define Helm chart:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"# applications/my-new-app/Chart.yaml\napiVersion: v2\nname: my-new-app\nversion: 0.1.0\ndependencies:\n  - name: chart\n    version: 0.1.0\n    repository: file://../../_chart\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Configure ArgoCD behavior:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"# applications/my-new-app/argo.yaml\ndestination: all\nnamespace: my-app-namespace\nautosync: true\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Set application values:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"# applications/my-new-app/values.yaml\nchart:\n  image: my-app:latest\n  port: 8080\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Commit and push"})," - ArgoCD will automatically discover and deploy!"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"-configuration-reference",children:"\ud83d\udccb Configuration Reference"}),"\n",(0,l.jsx)(e.h3,{id:"global-configuration-schema",children:"Global Configuration Schema"}),"\n",(0,l.jsxs)(e.p,{children:["The ",(0,l.jsx)(e.code,{children:"global.yaml"})," file defines the baseline configuration and cluster topology:"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"namespace: default              # Default namespace\nrepo: <git-repository-url>      # Repository URL\n\nclouds:                         # Define your infrastructure topology\n  - name: local\n    accounts:\n      - name: main\n        environments:\n          - name: common\n\nglobal:                         # Default global values\n  cloud: local\n  account: main  \n  env: common\n"})}),"\n",(0,l.jsx)(e.h3,{id:"application-configuration-schema",children:"Application Configuration Schema"}),"\n",(0,l.jsxs)(e.p,{children:["Each ",(0,l.jsx)(e.code,{children:"applications/*/argo.yaml"})," supports:"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"destination: all|<cloud>|<account>|<environment>|<combination>\nnamespace: <target-namespace>\nautosync: true|false\nsyncOptions:\n  - CreateNamespace=true\n  - ServerSideApply=true\n  # ... other ArgoCD sync options\n"})}),"\n",(0,l.jsx)(e.p,{children:"This architecture provides a scalable, maintainable GitOps solution that grows with your infrastructure complexity while maintaining simplicity for individual application deployments."}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"argocd",children:"ArgoCD"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"argocd appset schema"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"how to setup argocd"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"[?] Split applications (charts) and releases\nwe have a single directory for apps (charts)\nand we have a separate directory for releases\neach release refers to a chart\nalso each release keep current values folder structure for sophisticated overrides"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"app-library",children:"App-library"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"/docs/infra/platform/applibrary-helm-chart",children:"App-library Helm chart"})}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"other-manifest-generation-tools-kcl--jsonnet",children:"Other manifest generation tools: KCL / Jsonnet"}),"\n",(0,l.jsx)(e.admonition,{title:"Jsonnet",type:"warning",children:(0,l.jsx)(e.p,{children:"Do not allow to dynamically read yaml configuration\nRequired for global yaml configuration hierarchy"})}),"\n",(0,l.jsx)(e.admonition,{title:"KCL",type:"warning",children:(0,l.jsx)(e.p,{children:"Do not allow to dynamically read yaml configuration\nRequired for global yaml configuration hierarchy"})})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>t});var a=i(6540);const l={},r=a.createContext(l);function o(n){const e=a.useContext(r);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:o(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);