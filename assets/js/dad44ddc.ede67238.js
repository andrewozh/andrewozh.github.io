"use strict";(self.webpackChunkdevops_sandbox=self.webpackChunkdevops_sandbox||[]).push([[8205],{4771:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"db/clickhouse/altinity/altinity","title":"Altinity Clickhouse Operator","description":"|Distro|Altinity Clickhouse Operator|","source":"@site/docs/db/clickhouse/altinity/altinity.md","sourceDirName":"db/clickhouse/altinity","slug":"/db/clickhouse/altinity/","permalink":"/docs/db/clickhouse/altinity/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Clickhouse","permalink":"/docs/db/clickhouse/"},"next":{"title":"Automatic Clickhouse cluster backups and Restore guide","permalink":"/docs/db/clickhouse/altinity/altinity-automatic-backup"}}');var c=s(4848),i=s(8453);const a={},r="Altinity Clickhouse Operator",l={},o=[{value:"\u2705 Setup",id:"white_check_mark-setup",level:2},{value:"Usecases",id:"usecases",level:2},{value:"\u2705 Basic: create db, create user, connect, etc.",id:"white_check_mark-basic-create-db-create-user-connect-etc",level:3},{value:"Common: Create replicated table, write/read data, automate db/user provision",id:"common-create-replicated-table-writeread-data-automate-dbuser-provision",level:3},{value:"\u2705 Monitoring",id:"white_check_mark-monitoring",level:2},{value:"Maintenence",id:"maintenence",level:2},{value:"Articles",id:"articles",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"altinity-clickhouse-operator",children:"Altinity Clickhouse Operator"})}),"\n",(0,c.jsxs)(n.table,{children:[(0,c.jsx)(n.thead,{children:(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.th,{children:(0,c.jsx)(n.strong,{children:"Distro"})}),(0,c.jsx)(n.th,{children:(0,c.jsx)(n.a,{href:"https://altinity.com/kubernetes-operator/",children:"Altinity Clickhouse Operator"})})]})}),(0,c.jsxs)(n.tbody,{children:[(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.strong,{children:"Type"})}),(0,c.jsx)(n.td,{children:"kubernetes-operator"})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.strong,{children:"Deploy"})}),(0,c.jsx)(n.td,{children:"helm-chart"})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.strong,{children:"Docs"})}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.a,{href:"https://docs.altinity.com/altinitykubernetesoperator/",children:"link"}),", ",(0,c.jsx)(n.a,{href:"https://github.com/Altinity/clickhouse-operator/tree/master/docs",children:"github"})]})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.strong,{children:"Backup"})}),(0,c.jsx)(n.td,{})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.strong,{children:"Scaling"})}),(0,c.jsx)(n.td,{})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.strong,{children:"CLI"})}),(0,c.jsx)(n.td,{})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.strong,{children:"UI"})}),(0,c.jsx)(n.td,{children:"web"})]})]})]}),"\n",(0,c.jsxs)(n.h2,{id:"white_check_mark-setup",children:["\u2705"," Setup"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"/docs/db/clickhouse/altinity/altinity-setup-low-resource",children:"Altinity Clickhouse low resources setup"})}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"usecases",children:"Usecases"}),"\n",(0,c.jsxs)(n.h3,{id:"white_check_mark-basic-create-db-create-user-connect-etc",children:["\u2705"," Basic: create db, create user, connect, etc."]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Connect"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"kubectl exec -it chi-clickhouse-clickhouse-0-0-0 -n clickhouse -- clickhouse-client\nClickHouse client version 25.7.2.54 (official build).\nConnecting to localhost:9000 as user default.\nConnected to ClickHouse server version 25.7.2.\n\nchi-clickhouse-clickhouse-0-0-0.chi-clickhouse-clickhouse-0-0.clickhouse.svc.cluster.local :)\n"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Create a user by configuring ",(0,c.jsx)(n.code,{children:"ClickHouseInstallation"})," resource"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'spec:\n  configuration:\n    users:\n      dante/networks/ip: "::/0"\n      dante/password: dante\n      dante/profile: default\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Create a database"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'kubectl exec -it chi-clickhouse-clickhouse-0-0-0 -n clickhouse -- clickhouse-client \\\n  --host localhost \\\n  --port 9000 \\\n  --user dante \\\n  --password dante \\\n  --query="CREATE DATABASE IF NOT EXISTS dante ON CLUSTER clickhouse"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Connect to the database"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"kubectl exec -it chi-clickhouse-clickhouse-0-0-0 -n clickhouse -- clickhouse-client \\\n  --host localhost \\\n  --port 9000 \\\n  --user dante \\\n  --password dante \\\n  --database dante\n"})}),"\n",(0,c.jsx)(n.h3,{id:"common-create-replicated-table-writeread-data-automate-dbuser-provision",children:"Common: Create replicated table, write/read data, automate db/user provision"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"db provision / user provision"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"PushSecret"})," -> vault -> ",(0,c.jsx)(n.code,{children:"ExternalSecret"})," -> Secret: ",(0,c.jsx)(n.code,{children:"users.xml"})," -> volume: ",(0,c.jsx)(n.code,{children:"ClickhouseInstallation"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:"host: \"clickhouse-clickhouse.clickhouse.svc.cluster.local\"\nhostRegexp: '(chi-clickhouse-[^.]+\\d+-\\d+|clickhouse\\-clickhouse)\\.clickhouse\\.svc\\.cluster\\.local$'\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: "clickhouse-users-secret"\nspec:\n  refreshInterval: 15m\n  secretStoreRef:\n    name: "vault"\n    kind: SecretStore\n  target:\n    name: "clickhouse-users-secret"\n    creationPolicy: Owner\n    template:\n      engineVersion: v2\n      metadata:\n        annotations:\n          reloader.stakater.com/match: "true"\n      data:\n        users.xml: |\n          <clickhouse>\n              <profiles>\n                  <default>\n                  </default>\n                  <readonly>\n                      <readonly>1</readonly>\n                  </readonly>\n              </profiles>\n              <users>\n                  <default>\n                      <password></password>\n                      <networks>\n                          <ip>::/0</ip>\n                      </networks>\n                      <profile>default</profile>\n                      <quota>default</quota>\n                  </default>\n                  {{ "{{" }}- range $key, $value := . -{{ "}}" }}\n                  {{ "{{" }}- $decodedValue := ( $value | fromJson ) -{{ "}}" }}\n                  {{ "{{" }}- $db := coalesce (get $decodedValue "CLICKHOUSE_DB") (get $decodedValue "CLICKHOUSE_DB_NAME") (get $decodedValue "CLICKHOUSE_DATABASE") -{{ "}}" }}\n                  {{ "{{" }}- $user := get $decodedValue "CLICKHOUSE_USER" -{{ "}}" }}\n                  {{ "{{" }}- $password := get $decodedValue "CLICKHOUSE_PASSWORD" -{{ "}}" }}\n                  {{ "{{" }}- if and $user (ne $user "default") -{{ "}}" }}\n                  <{{ "{{" }} $user {{ "}}" }}>\n                    <allow_databases>\n                      <database>{{ "{{" }} $db {{ "}}" }}</database>\n                    </allow_databases>\n                    <networks>\n                      <host_regexp>{{ .Values.hostRegexp }}</host_regexp>\n                      {{- include "clickhouse.cidrRangeXml" $ | indent 22 }}\n                    </networks>\n                    <password>{{ "{{" }} $password {{ "}}" }}</password>\n                    <profile>default</profile>\n                    <quota>default</quota>\n                  </{{ "{{" }} $user {{ "}}" }}>\n                  {{ "{{" }}- end -{{ "}}" }}\n                  {{ "{{" }}- end -{{ "}}" }}\n              </users>\n              <quotas>\n                  <default>\n                      <interval>\n                          <duration>3600</duration>\n                          <queries>0</queries>\n                          <errors>0</errors>\n                          <result_rows>0</result_rows>\n                          <read_rows>0</read_rows>\n                          <execution_time>0</execution_time>\n                      </interval>\n                  </default>\n              </quotas>\n          </clickhouse>\n        initdb.sh: |\n          {{ "{{" }}- range $key, $value := . -{{ "}}" }}\n          {{ "{{" }}- $decodedValue := ( $value | fromJson ) -{{ "}}" }}\n          {{ "{{" }}- $db := coalesce (get $decodedValue "CLICKHOUSE_DB") (get $decodedValue "CLICKHOUSE_DB_NAME") (get $decodedValue "CLICKHOUSE_DATABASE") -{{ "}}" }}\n          {{ "{{" }}- $user := get $decodedValue "CLICKHOUSE_USER" -{{ "}}" }}\n          {{ "{{" }}- $password := get $decodedValue "CLICKHOUSE_PASSWORD" -{{ "}}" }}\n          {{ "{{" }}- if and $user (ne $user "default") -{{ "}}" }}\n          echo "CREATE DATABASE IF NOT EXISTS {{ "{{" }} $db {{ "}}" }} ON CLUSTER clickhouse" ;\n          clickhouse-client --host {{ .Values.host }} --user {{ "{{" }} $user {{ "}}" }} --password {{ "{{" }} $password {{ "}}" }} --query="CREATE DATABASE IF NOT EXISTS {{ "{{" }} $db {{ "}}" }} ON CLUSTER clickhouse" ;\n          {{ "{{" }}- end -{{ "}}" }}\n          {{ "{{" }}- end -{{ "}}" }}\n  dataFrom:\n  - find:\n      conversionStrategy: Default\n      decodingStrategy: None\n      path: /clickhouse\n      tags:\n        environment: common\n        use_clickhouse: "true"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"schedule automatic database creation"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: "clickouse-initdb"\n  annotations:\n    reloader.stakater.com/auto: "true"\nspec:\n  schedule: "0 0 1 * *"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: initdb\n            image: "altinity/clickhouse-server:latest"\n            command: ["/bin/bash"]\n            args: ["/etc/clickhouse-client/initdb.sh"]\n            volumeMounts:\n              - name: "clickhouse-initdb-volume"\n                mountPath: "/etc/clickhouse-client/initdb.sh"\n                subPath: initdb.sh\n          volumes:\n          - name: "clickhouse-initdb-volume"\n            secret:\n              secretName: "clickhouse-users-secret"\n              items:\n              - key: initdb.sh\n                path: initdb.sh\n          restartPolicy: OnFailure\n'})}),"\n",(0,c.jsxs)(n.h2,{id:"white_check_mark-monitoring",children:["\u2705"," Monitoring"]}),"\n",(0,c.jsx)(n.admonition,{title:"Grafana Dashboard",type:"note",children:(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://github.com/Altinity/clickhouse-operator/blob/2ed803c6acba00a371bcf0877ab3784895b41add/grafana-dashboard/Altinity_ClickHouse_Operator_dashboard.json",children:"https://github.com/Altinity/clickhouse-operator/blob/2ed803c6acba00a371bcf0877ab3784895b41add/grafana-dashboard/Altinity_ClickHouse_Operator_dashboard.json"})})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'altinity-clickhouse-operator:\n  serviceMonitor:\n    enabled: true\n  dashboards:\n    enabled: true\n    annotations:\n      argocd.argoproj.io/sync-options: ServerSideApply=true\n    additionalLabels:\n      grafana_dashboard: "1"\n'})}),"\n",(0,c.jsx)(n.h2,{id:"maintenence",children:"Maintenence"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"/docs/db/clickhouse/altinity/altinity-automatic-backup",children:"Automatic Clickhouse cluster backups and Restore guide"})," -- todo"]}),"\n",(0,c.jsx)(n.li,{children:"Scaling"}),"\n",(0,c.jsx)(n.li,{children:"Upgrade"}),"\n"]}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"articles",children:"Articles"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"#",children:"Example article link"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const c={},i=t.createContext(c);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);